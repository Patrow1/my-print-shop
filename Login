#include <iostream>
#include <fstream>
#include <unordered_map>
#include <regex>
#include <openssl/sha.h>

using namespace std;

class UserAuth {
private:
    unordered_map<string, string> users;
    string currentUser;
    int loginAttempts = 0;
    const int maxAttempts = 3;

    // Funkcja do szyfrowania hasła (SHA-256)
    string sha256(const string& password) {
        unsigned char hash[SHA256_DIGEST_LENGTH];
        SHA256((unsigned char*)password.c_str(), password.size(), hash);
        string hashedPassword;
        for (int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
            char buf[3];
            sprintf(buf, "%02x", hash[i]);
            hashedPassword += buf;
        }
        return hashedPassword;
    }

    // Wczytuje użytkowników z pliku
    void loadUsers() {
        ifstream file("users.txt");
        if (!file) {
            cout << "Brak pliku users.txt - Tworzenie nowego...\n";
            return;
        }
        string email, password;
        while (file >> email >> password) {
            users[email] = password;
        }
        file.close();
    }

    // Zapisuje nowego użytkownika do pliku
    void saveUser(const string& email, const string& password) {
        ofstream file("users.txt", ios::app);
        file << email << " " << password << endl;
        file.close();
    }

    // Sprawdza poprawność formatu e-maila
    bool isValidEmail(const string& email) {
        regex emailRegex(R"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)");
        return regex_match(email, emailRegex);
    }

public:
    UserAuth() {
        loadUsers();
    }

    // Rejestracja nowego użytkownika
    bool registerUser(const string& email, const string& password) {
        if (users.find(email) != users.end()) {
            cout << "Użytkownik już istnieje!\n";
            return false;
        }
        if (!isValidEmail(email)) {
            cout << "Niepoprawny format e-maila!\n";
            return false;
        }
        string hashedPassword = sha256(password);
        users[email] = hashedPassword;
        saveUser(email, hashedPassword);
        cout << "Rejestracja zakończona sukcesem!\n";
        return true;
    }

    // Logowanie użytkownika
    bool login(const string& email, const string& password) {
        if (loginAttempts >= maxAttempts) {
            cout << "Zbyt wiele nieudanych prób logowania! Spróbuj później.\n";
            return false;
        }

        string hashedPassword = sha256(password);
        if (users.find(email) != users.end() && users[email] == hashedPassword) {
            currentUser = email;
            loginAttempts = 0; // Resetujemy liczbę prób po zalogowaniu
            cout << "Zalogowano pomyślnie jako: " << email << endl;
            return true;
        }

        loginAttempts++;
        cout << "Błędny e-mail lub hasło! Pozostałe próby: " << (maxAttempts - loginAttempts) << endl;
        return false;
    }

    // Wylogowanie użytkownika
    void logout() {
        if (currentUser.empty()) {
            cout << "Nie jesteś zalogowany!\n";
            return;
        }
        cout << "Wylogowano: " << currentUser << endl;
        currentUser = "";
    }

    // Resetowanie hasła
    void resetPassword(const string& email, const string& newPassword) {
        if (users.find(email) == users.end()) {
            cout << "Użytkownik nie istnieje!\n";
            return;
        }
        string hashedPassword = sha256(newPassword);
        users[email] = hashedPassword;

        // Nadpisanie pliku z użytkownikami
        ofstream file("users.txt");
        for (const auto& pair : users) {
            file << pair.first << " " << pair.second << endl;
        }
        file.close();

        cout << "Hasło zostało zresetowane!\n";
    }

    // Zwraca aktualnie zalogowanego użytkownika
    string getCurrentUser() {
        return currentUser;
    }
};

// Menu główne
void showMenu() {
    cout << "\n1. Rejestracja\n2. Logowanie\n3. Wylogowanie\n4. Resetowanie hasła\n5. Wyjście\nWybierz opcję: ";
}

int main() {
    UserAuth auth;
    int choice;
    string email, password, newPassword;

    while (true) {
        showMenu();
        cin >> choice;
        cin.ignore();

        switch (choice) {
            case 1:
                cout << "Podaj email: ";
                getline(cin, email);
                cout << "Podaj hasło: ";
                getline(cin, password);
                auth.registerUser(email, password);
                break;
            case 2:
                cout << "Podaj email: ";
                getline(cin, email);
                cout << "Podaj hasło: ";
                getline(cin, password);
                auth.login(email, password);
                break;
            case 3:
                auth.logout();
                break;
            case 4:
                cout << "Podaj email: ";
                getline(cin, email);
                cout << "Podaj nowe hasło: ";
                getline(cin, newPassword);
                auth.resetPassword(email, newPassword);
                break;
            case 5:
                cout << "Koniec programu.\n";
                return 0;
            default:
                cout << "Nieprawidłowa opcja!\n";
        }
    }
}


    
